pipeline {
    agent any
    environment {
      APP_NAME = 'my-java-app'
      ECR_REPO = 'my-ecr-repo'
      ECR_REGION = 'ap-southeast-1'
      APP = 'secops'
      IMAGE_TAG='SecOps-${BUILD_NUMBER}'
      AWS_ACCESS_KEY_ID = "ASIAXEICFCS2DSPP7LO2"
      AWS_SECRET_ACCESS_KEY = "v6aq03vkn3HV/AzOrt51iWYTc3Wa8fz/mB+fgZNU"
      AWS_REGION = "ap-southeast-1"
      AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjELL//////////wEaCXVzLWVhc3QtMSJIMEYCIQCv5ah0nL+XO+9Dgj6OqbQOomWrhRD9ThI8/mx+8XjIngIhAKxTRH892BGKIQgSmsN72BrU+qdwwzlCRCCPWFAscDwGKpADCCsQAxoMNDkwMTY3NjY5OTQwIgxXS098PDObLS3yF/cq7QI3Wes5jbao3np8oWzn1mZn77g8QymOcs++qZvaAESuUUAWGGG6LPTJv/c71aJIf9CiQpNECaHkbDrYcqUvMvs6ECoa4UwfRnOIDxvQfF0UFnG9hGlSjcSIPZ5se28oui6K1Xde9WdwdVdEFUpwvx70Ldw+X1Hgt8Ij10oS1qCSp6u6BZK69SuzJO5W1jUMetZpisLImtSTOQLMLrXqJmanoULOBLwQyeLyc+XxUXOjMAj6w9jdosu0x533bSFZ6jizGfnRTsND7YEsCNxquGTrMi77ui8tK86Nt4dMzaIWX1tevKHWPPyfj07VmzAPcBL9k4rx+LWFQr3w97BZ6v4oHAbGL9PTKYwraJPb0KjnyfX1xr3yfretcfB/xaS/B7oMrWeZvfrY03hek6jaBooQZhPZm953x225A5pIjvHYfnQHvICu0MKfyK0IieJqihF59t6FY8Zo7omejh6l/QenWQ/swpOdhF+l79wrQDDO/5SlBjqlAfZ744+fMZxVUCvOYGLgpvgKn3KtMLHU33FQajuGCv2y1fBPJoNRC+BcBbYsArT8OM9fV8Tow6NsucmLy/5As4V2ipXYy8+WXjwQK/WBdeh+nOUb/GwlmX0UNlpnMr7XicTogUfmh7AJn6yBfY6O7lbi2WFZjwd45540Xh5AdGEu8onxdZFF7AmdMgYUmtJlS2J6c+mIqw68TpXW11A7YamlYB+rMA=="
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                 sh 'chmod +x mvnw' // Ensure the script has executable permissions
                 sh 'mvn dependency:tree -version'
                 sh 'mvn snyk:test -fn'
            }
         }
    }
        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${app} ."
            }
        }
        stage('Push to ECR') {
           steps {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                    sh "docker tag my-ecr-repo-op-${app}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                    sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                }
           }
         stage('Kubernetes Deployment of ASG Bugg Web Application') {
	        steps {
	           withKubeConfig([credentialsId: 'kubelogin']) {
		           sh('kubectl delete all --all -n devsecops')
		           sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		}
	      }
   	}
    }
}
