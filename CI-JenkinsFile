pipeline {
    agent any
    environment {
      APP_NAME = 'my-java-app'
      ECR_REPO = 'my-ecr-repo'
      ECR_REGION = 'ap-southeast-1'
      APP = 'secops'
      IMAGE_TAG='SecOps-${BUILD_NUMBER}'
      AWS_ACCESS_KEY_ID = "ASIAXEICFCS2ATC2MUOJ"
      AWS_SECRET_ACCESS_KEY = "dn3CY5e6tLixXNl7zb7cMw3SPe3nyMRPw6gpyVH7"
      AWS_REGION = "ap-southeast-1"
      AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEOr//////////wEaCXVzLWVhc3QtMSJGMEQCIE7FnYMn3s+a43fHeXVySQZ5hwkCvW444qs4ZFM+62njAiAdL2Kg5oBW61eqPwyha1kULytGcZN7tqr8Xy+f278naSqMAwhzEAMaDDQ5MDE2NzY2OTk0MCIMYFAuzBNp4RKbyvyBKukC4PNWtEExakT+z8Ma+e6xZ5/rDBtBu3z8cUbDtcE9MgWYUio0o2wFLBt2qf/LkrCjTAbfdQzSo+Wl44OO4jIAjZoMS4s58MMSM9uehlLq6BVIXCAqgtkE949dUx0eDDOnC/EUsy7us+VgbsoBYk8ZgfaSQDlcZ4yEq8Jd5f8/mu8TJ6feMUnMasWH8VBwBLGHGhf2LiPEYYSXXykKzKYqlsQ1oVQCuDzQDDRE+W8pGEFLVACo/EDr3tg+LsG4TgIpFFivUUV6fMlzDa4q9L+vLfusWz//AvaShg0U7XBKiSzBfD41lR905bKkVDkn2B9q9KckYL7bW2mr0qBv6wHySp15Iq8G+pJxsfQF8VMT32P5Y7SwaNLY3Rk1O6Gk2+jnUkFPaXwUNNYSG60H3WfiQOLfIdGb27BNPsz14faDimca/a9I9gR0vUejZC5/e4lD+1Ne9tNQoKsD+xvOHGFVfngTD0peibvCeTC5tdmlBjqnAV3o0V9HP2Mlzv/H71KdLrYuV8/H4MbOqXSr/CoFkthRCQ+GqxTZtflxeTn7wHdvXf8cjTgUVm0Bref4ymBf7cT4eNjQhquQDTAQXU2i+q6FwmkKNrK7qhoJc4OnxHzTQv4f6yfB6qY/2OUfLWo7jtPMpBk2vew9u70g6lz/stcMoInwVGyw+qm09J4KCNTpuZQ1yqLhm8MSdXVdG8hRvYb8euHU88GR"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                 sh 'chmod +x mvnw' // Ensure the script has executable permissions
                 sh 'mvn dependency:tree -version'
                 sh 'mvn snyk:test -fn'
            }
         }
    }
        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${app} ."
            }
        }
        stage('Push to ECR') {
           steps {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                    sh "docker tag my-ecr-repo-op-${app}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                    sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                }
           }
         stage('Kubernetes Deployment of ASG Bugg Web Application') {
	        steps {
	           withKubeConfig([credentialsId: 'kubelogin']) {
		           sh('kubectl delete all --all -n devsecops')
		           sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		}
	      }
   	}
        stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 180; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	stage('RunDASTUsingZAP') {
          steps {
		    withKubeConfig([credentialsId: 'kubelogin']) {
				sh('zap.sh -cmd -quickurl http://$(kubectl get services/asgbuggy --namespace=devsecops -o json| jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html')
				archiveArtifacts artifacts: 'zap_report.html'
		    }
	     }
       } 


    }
}
