pipeline {
    agent any

    environment {
        APP_NAME = 'my-java-app'
        ECR_REPO = 'my-ecr-repo'
        ECR_REGION = 'ap-southeast-1'
        APP = 'secops'
        IMAGE_TAG = "SecOps-${BUILD_NUMBER}"
        AWS_ACCESS_KEY_ID = "ASIAXEICFCS2E3Y76JWX"
        AWS_SECRET_ACCESS_KEY = "iKs9zvz/OGEFZX//bsGsXhcC8HKxV3LJG+JsBYDy"
        AWS_REGION = "ap-southeast-1"
        AWS_SESSION_TOKEN = "IQoJb3JpZ2luX2VjEIn//////////wEaCXVzLWVhc3QtMSJHMEUCIQDaL59Zlp7BaZsk4XcAIFg/sQ1ClGpa9HBtuz9vxsdIXwIgMRsaG4TKL5/1ryml9X3dwlSPzuT/UGV8sVIOvkjmXk0qpAMIEhADGgw0OTAxNjc2Njk5NDAiDA3MNbVZ3h0D9ak9EyqBAwGvwfUjVKgkfHPb33suvu+ubc0c5LwM6JrlV/WCzNr5fRWaDkhuV8+2deDA8rejPMKegJzPEV9kPyOMaSzRaITphmY3Iq+ShXNAsYTcFs1z8SV+RN602eJkQKGx3xvCrg/AD39WigyaaSqSkd2wG0ueFJHvOpIewKVuN415aJKC56B0xXxmEjjKJPJDWZXaaTSxsLqZTpViVi1bppflXXoibVnhpgh/j+YOdSsvCVnfT/sKxGU+lC2wIlg9oDx6mHCSpHmAONhMJP/dQl89ilj4LOIWXDCS/TNHrYItcuuYDdo8dVVqZuL/gdk4toz0EMj5F3jziBHY/yXTcV1sNxra28+rljrSsy46efTdtwLZtVKGqOSqcD2+FRmYRTzIgAGK+c76PewIQJeObHe0nyylQ5F+wbTXlBgqOPu0DGYahLpbXt1F+O1bTKu2ki7c4iEuCIGIRFKAQCFNDUrpgnLov7OpBUV5xuW1YgeShcH+ZEHyRZ3jLbzRQdjsiRuer34w147EpQY6pgHHScL84TkuthMHFN1eyhXhJOmoZWD0eMJXkJ6r3lzD8n+5cUNFpyQaC+ZKEOTwg95uedQmRhy8DNGDWjHR0ZqTuem4ZHRBCvdDys0Pk+aURQEDQmWhubzLjlwulwS2iiFf9YuuCELCNM6ELklzxzPLiRGCzIbWQiT2GC7OYQwx+ZkwBiDJ3utUWd+FEAMr3i81jbgf/rs/9U/UwWCRUR9OQefWGygk"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]
                ])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('Run SCA Analysis Using Snyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    sh 'chmod +x mvnw' // Ensure the script has executable permissions
                    sh 'mvn dependency:tree -version'
                    sh 'mvn snyk:test -fn'
                }
            }
        }

        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${APP} ."
            }
        }

        stage('Push to ECR') {
            steps {
                sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                sh 'aws configure set default.region $AWS_REGION'
                sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                sh "docker tag my-ecr-repo-op-${APP}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${APP}-${BUILD_NUMBER}"
                sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${APP}-${BUILD_NUMBER}"
            }
        }

        stage('Kubernetes Deployment of ASG Buggy Web Application') {
            steps {
                withKubeConfig([credentialsId: 'kubelogin']) {
                    sh 'kubectl delete all --all -n devsecops'
                    sh 'kubectl apply -f deployment.yaml --namespace=devsecops'
                }
            }
        }

        stage('Wait for Testing') {
            steps {
                sh 'sleep 30; echo "Application has been deployed on K8S"'
            }
        }

          stage('Run DAST Using ZAP') {
   stage('Run DAST Using ZAP') {
   stage('Run DAST Using ZAP') {
    steps {
        withKubeConfig([credentialsId: 'kubelogin']) {
            sh 'chmod +x zap.sh'
            sh """export ZAP_REPORT=${ZAP_REPORT}
            ./zap.sh -cmd -quickurl http://$(kubectl get services/asgbuggy --namespace=devsecops -o json | jq -r '.status.loadBalancer.ingress[0].hostname') -quickprogress -quickout ${ZAP_REPORT}"""

            // Verify the presence of the zap_report.html file
            sh "ls ${ZAP_REPORT}"

            // Archive the zap_report.html file
            archiveArtifacts artifacts: "${ZAP_REPORT}"
        }
    }
}


    }
}
