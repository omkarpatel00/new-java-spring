pipeline {
    agent any
    environment {
      APP_NAME = 'my-java-app'
      ECR_REPO = 'my-ecr-repo'
      ECR_REGION = 'ap-southeast-1'
      APP = 'secops'
      IMAGE_TAG='SecOps-${BUILD_NUMBER}'
      AWS_ACCESS_KEY_ID = "ASIAXEICFCS2HTZJFAP4"
      AWS_SECRET_ACCESS_KEY = "hsv6X3lEcpD+UPmzqxL9k/SScY1Uen50RbLm16rt"
      AWS_REGION = "ap-southeast-1"
      AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEOv//////////wEaCXVzLWVhc3QtMSJGMEQCIGmDhpMwU7BHepXd4cVYD63wloLlMsv4TLwLnblO+U60AiAQWUmCB0QFcWzJkwcZrudWIGboEyVgFoEqL377va3RuSqkAwh0EAMaDDQ5MDE2NzY2OTk0MCIM8y8z0aRE2o+FB1+zKoEDAfv0UUv+lNk0AyRIjbv2WuQkO56NXwoqnO53NToxcwnRViLyYDgZ3Gg9YjLIThD4UU7HYqwhsZwib2m2trpHxHt3jqdG9lZH9TNttctcGi5No202qyYFVnJUV5PucSCn+hvEHFC7V/wxxbD3fWmfq84S4O5gXrzkKuImvoS8DayObSMYoGTXDSpff1Mjy+xPd8dW+wm4mUzqyi3aNm90WAgZ2Fq0+oWwdqaZzdz1L1dJNmozwgwo73EufgxfpLB5IiLSFm6L60uHUkyITA5PVOuNWnQhOmS+oH1f1YWhT1iQHUFXAKmwwecvJ14O63ZOuZxhzJ0ES5oY3IVcZ232cnM9fXLtc/CWLpiDNLLCismx8kX3TPWpi4Q2aZZPe5sE1enh2ULrr21o7lftisOwZk0LWkvTZbnOtwdvy8YOB+T9x9PB/Nx8k72hurQAGHUS26mv2LWjuD2pl1YPrKFf2Te/ZBGfnzMpvLo8R9wStiJzEZLMP8SjjeQEDVBzQ1VNCDCT19mlBjqnAa0+H7LrmFgyi6oACWJXjpxUL1/ADNJO3LM0E2CVTB30ugeKNqHdKYlyfMBc93KvPLhNiAaDUWlImiAkfAMnm82m3nIDzXQubF5B42qiCIthWAqk6dfe++FuNbwHM8z1aJ9A1K4F2V/sJvkJ5+fI63c9oDPXBVDZ2/7UXeuzNcS3NPBOYV/RqpE+c496GbpX3RzsGCVuj6kRSXxafuY5ZYfaBgkc37sK"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                 sh 'chmod +x mvnw' // Ensure the script has executable permissions
                 sh 'mvn dependency:tree -version'
                 sh 'mvn snyk:test -fn'
            }
         }
    }
        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${app} ."
            }
        }
        stage('Push to ECR') {
           steps {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                    sh "docker tag my-ecr-repo-op-${app}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                    sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                }
           }
         stage('Kubernetes Deployment of ASG Bugg Web Application') {
	        steps {
	           withKubeConfig([credentialsId: 'kubelogin']) {
		           sh('kubectl delete all --all -n devsecops')
		           sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		}
	      }
   	}
        stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 180; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	stage('RunDASTUsingZAP') {
          steps {
		    withKubeConfig([credentialsId: 'kubelogin']) {
				sh('zap.sh -cmd -quickurl http://$(kubectl get services/asgbuggy --namespace=devsecops -o json| jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html')
				archiveArtifacts artifacts: 'zap_report.html'
		    }
	     }
       } 


    }
}
