pipeline {
    agent any
    environment {
      APP_NAME = 'my-java-app'
      ECR_REPO = 'my-ecr-repo'
      ECR_REGION = 'ap-southeast-1'
      APP = 'secops'
      IMAGE_TAG='SecOps-${BUILD_NUMBER}'
      AWS_ACCESS_KEY_ID = "ASIAXEICFCS2KMRUBP4D"
      AWS_SECRET_ACCESS_KEY = "bRLFi32j5xk99CU9bDx6xKGlgKCGA/uNzvNFAr2e"
      AWS_REGION = "ap-southeast-1"
      AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEIz//////////wEaCXVzLWVhc3QtMSJGMEQCIFnyTglf1JLrqDPnQDjNFMzaBp0h8pzgzwuqo2w7eT4gAiB1vEEV/T1BJ6IBc+viHHXZYLQmNHu9eKjI/j4hNWzYISqkAwgUEAMaDDQ5MDE2NzY2OTk0MCIM8fKHWLz0lCR6X8t8KoEDhdqxzylW9PFMvDL65+/OAh1t1bRVGlXjiGN9g0UzL9G1tBZaG3FsjgJJF4ztj2skUxrv2/y0RZ7RYa6pdUeh+07mV03MUC3tZHt6BhJHOZj6rNa6x5vSTMjsoen2dNswg7a4VybnYsXcpHOdGWRfOlEjBtQZgicE15+0ylWziTfzclxtrG7wI1YnoOGe2Sr0zWzUmEvMO8gNG+TQDxH08msCZYFVgpukrYmllWz/go1p9H7FaajHKtSYq2kyIq64zw7X8ts6pNPyL+Gr3ePUAivq2RbQ5dZfa2OyVSG3Nmfm5XrVOVq4mvzHZFeUIxzs04R9ARhW6JJq64jQ19qnwBqmMleqi+PjQs0H375ZO31Ji8yNgNvx6JVagUzd0QrbPqmpk4O3a9SSM1cffryb99qoH+w/Pbo1hfR2HQNIg4lbQq0hD4ZR/p7ri6W/bgzKpohV7bIMWHBA2wPhKXK3E/TKIUp7v4I39S5BeolCAqft0q7aWCJcMuuFecvjQsOJoDCR3MSlBjqnAbucTe76S9/WUaRtfnF05TlDzcNtMMJMrfSbq7CWTGgmyEEHYJrh124g50idPfYjlmIpPhA+SWEYFlEkgkQsrdorc+xisFRVZsHkZzByiSgcZN5jn1xj52byvKTfdoRTCKZyTYoh2WXwn+2W9bJIP2mc5B679nTKbTcbktFbAyIJPjc7CBAyYMkAlqKT3g1HmhyklBGXrfRwvlUo6ZX0fJp9lUfH/MHa"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                 sh 'chmod +x mvnw' // Ensure the script has executable permissions
                 sh 'mvn dependency:tree -version'
                 sh 'mvn snyk:test -fn'
            }
         }
    }
        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${app} ."
            }
        }
        stage('Push to ECR') {
           steps {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                    sh "docker tag my-ecr-repo-op-${app}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                    sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                }
           }
         stage('Kubernetes Deployment of ASG Bugg Web Application') {
	        steps {
	           withKubeConfig([credentialsId: 'kubelogin']) {
		           sh('kubectl delete all --all -n devsecops')
		           sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		}
	      }
   	}
        stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 30; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	stage('RunDASTUsingZAP') {
           steps {
           withKubeConfig([credentialsId: 'kubelogin']) {
            sh 'chmod +x zap.sh'
            sh './zap.sh -cmd -quickurl http://$(kubectl get services/asgbuggy --namespace=devsecops -o json | jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html'
            
            // Verify the presence of the zap_report.html file
            sh 'ls ${WORKSPACE}/zap_report.html'
            
            // Archive the zap_report.html file
            archiveArtifacts artifacts: '${WORKSPACE}/zap_report.html'
        }
    }
}


    }
}
