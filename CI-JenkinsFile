pipeline {
    agent any
    environment {
      APP_NAME = 'my-java-app'
      ECR_REPO = 'my-ecr-repo'
      ECR_REGION = 'ap-southeast-1'
      APP = 'secops'
      IMAGE_TAG='SecOps-${BUILD_NUMBER}'
      AWS_ACCESS_KEY_ID = "ASIAXEICFCS2P6W7XDO2"
      AWS_SECRET_ACCESS_KEY = "eMHPr3dW96H2EuOY2cB8lLP08MEz3Wn9FVywGNqi"
      AWS_REGION = "ap-southeast-1"
      AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjENT//////////wEaCXVzLWVhc3QtMSJHMEUCIGafQbFkiv5wmJHEqLihdlNpa/D2gt/vZDduN61KStwLAiEAzGar+hSHmo5dsTYDORlAR2Nq2c71M6tzY/2kPqkTthwqpAMIXRADGgw0OTAxNjc2Njk5NDAiDGMVI3Px7QSPxJHq+yqBA2+dTnIZpBjrcBSmLwflopWNBwowgwXayIfWQV7AmL5NnkhTh49IZ8KfVUyloNoayUisaTydaI+eMu2d3VKzAwQQUJ3jC57ZhGVCsgQ8cXWj5etRDB8PIg5CfBPO6fa1ldK+RIv5zFeF5uNTCoxyJFI4mO8TO6PEVudjX9ll/p4ELpeuuceivt7S/Xr9PciYkAyN+v4gtP9laGF8InWG+h8YmXG7ObSNsnSYfP94qQFp6g238SZD4vaNPsO0CL7yD4OZMJVPTqPdiJ3JRiyGFazesu29KWbqoMtpsW+0KU/N0+KV7W60NOMnmLIXTBzHjIn2ZV7ra0lyN9KIrAQ2xza4pTSMxbsafNBJAf3caw1smwdioP8HCvVuNWA1OzYCl+j4hQdtnn723zMycfQOuLItoFlDfT+SlombrKmF0LlAd9jcXFQmVl2z/FPeuufKT8Jd3wAARx8ocIBtZ2R9sM0tI6eRUXh6YSZ3cxdq5o48sdXG9qSJEkAhyvY7wzbAsIgw4NjUpQY6pgH+jZ7LWVoaiM3PY7IF6xTKvdm129jUebtPoPGbvacB8JiR9jwQDVg+dbxLcwl+H3UBfHkVfZk4R5hC7XCejeuK5KMiUEyrB4XJ75TQx90aahbKneqjyE5vLN0RkxRMmm7dwoOJJvtrpwSbb9wzX0sfLert7qe7mX8ocvmDznH7vOAUP2qlAH3wd0foalt/Mb/ClpDgfniIvv7ZN1G5GhBZpeOSr8qx"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'op-github', url: 'https://github.com/omkarpatel00/new-java-spring.git']]])
            }
        }

        stage('Compile and Run Sonar Analysis') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=new-java-spring -Dsonar.organization=new-java-spring -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=9f219a9085660de97bf778f66fbcaac0a10ca8f7'
            }
        }

        stage('RunSCAAnalysisUsingSnyk') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                 sh 'chmod +x mvnw' // Ensure the script has executable permissions
                 sh 'mvn dependency:tree -version'
                 sh 'mvn snyk:test -fn'
            }
         }
    }
        stage('Build an image') {
            steps {
                sh "docker build -t my-ecr-repo-op-${app} ."
            }
        }
        stage('Push to ECR') {
           steps {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com"
                    sh "docker tag my-ecr-repo-op-${app}:latest 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                    sh "docker push 490167669940.dkr.ecr.ap-southeast-1.amazonaws.com/my-ecr-repo-op:${app}-${BUILD_NUMBER}"
                }
           }
         stage('Kubernetes Deployment of ASG Bugg Web Application') {
	        steps {
	           withKubeConfig([credentialsId: 'kubelogin']) {
		           sh('kubectl delete all --all -n devsecops')
		           sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		}
	      }
   	}
        stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 30; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	stage('RunDASTUsingZAP') {
          steps {
		    withKubeConfig([credentialsId: 'kubelogin']) {
				sh('zap.sh -cmd -quickurl http://$(kubectl get services/asgbuggy --namespace=devsecops -o json| jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html')
				archiveArtifacts artifacts: 'zap_report.html'
		    }
	     }
       } 


    }
}
